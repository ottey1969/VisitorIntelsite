"""
Create a sample infographic to demonstrate the output
"""

from PIL import Image, ImageDraw, ImageFont
import base64
from io import BytesIO

def create_sample_infographic():
    """Create a sample infographic showing what monthly subscribers get"""
    
    width = 1080
    height = 1080
    
    # Colors
    primary_color = '#2563eb'
    secondary_color = '#1e40af'
    accent_color = '#f59e0b'
    text_color = '#1f2937'
    light_color = '#f8fafc'
    
    # Create image
    img = Image.new('RGB', (width, height), light_color)
    draw = ImageDraw.Draw(img)
    
    # Use default font since custom fonts might not be available
    try:
        font_large = ImageFont.load_default()
        font_medium = ImageFont.load_default()
        font_small = ImageFont.load_default()
    except:
        font_large = font_medium = font_small = ImageFont.load_default()
    
    # Header section
    draw.rectangle([(0, 0), (width, 200)], fill=primary_color)
    draw.text((50, 50), "Perfect Roofing Team", fill='white', font=font_large)
    draw.text((50, 100), "AI Conversation Insights", fill='white', font=font_medium)
    draw.text((50, 150), "Roofing Maintenance Best Practices", fill='white', font=font_small)
    
    # Content sections
    y_pos = 250
    
    # AI Agent quotes
    agents = [
        ("Marketing AI", "Regular roof inspections can prevent 80% of major roofing problems and save homeowners thousands in repair costs."),
        ("Technical AI", "The best time for roof maintenance is during spring and fall when weather conditions are optimal for safe inspections."),
        ("Customer Service AI", "Most homeowners don't realize that small leaks can cause structural damage within 6 months if left untreated."),
        ("SEO AI", "Professional roofing services see 40% more calls during storm season - preparation is key for both safety and business.")
    ]
    
    for i, (agent, quote) in enumerate(agents):
        # Agent name with icon
        draw.text((50, y_pos), f"üí¨ {agent}", fill=primary_color, font=font_medium)
        y_pos += 35
        
        # Quote content
        # Break long text into multiple lines
        words = quote.split()
        lines = []
        current_line = []
        
        for word in words:
            current_line.append(word)
            test_line = ' '.join(current_line)
            if len(test_line) > 65:  # Approximate character limit per line
                if len(current_line) > 1:
                    current_line.pop()
                    lines.append(' '.join(current_line))
                    current_line = [word]
                else:
                    lines.append(test_line)
                    current_line = []
        
        if current_line:
            lines.append(' '.join(current_line))
        
        for line in lines:
            draw.text((70, y_pos), line, fill=text_color, font=font_small)
            y_pos += 25
        
        y_pos += 15  # Space between quotes
    
    # Statistics section
    stats_y = y_pos + 20
    draw.rectangle([(50, stats_y), (width-50, stats_y + 150)], fill=accent_color)
    
    stats = [
        "üìä 4 AI Experts Consulted",
        "üí¨ 16 Key Insights Generated", 
        "‚è±Ô∏è Real-time Analysis",
        "üéØ Industry-Specific Knowledge"
    ]
    
    stats_text_y = stats_y + 20
    for stat in stats:
        draw.text((70, stats_text_y), stat, fill='white', font=font_medium)
        stats_text_y += 30
    
    # Footer
    footer_y = height - 150
    draw.rectangle([(0, footer_y), (width, height)], fill=secondary_color)
    draw.text((50, footer_y + 30), "Generated by AI Conversations Platform", fill='white', font=font_medium)
    draw.text((50, footer_y + 70), f"Created: December 2024", fill='white', font=font_small)
    draw.text((50, footer_y + 100), "Monthly Subscribers Get Auto-Generated Infographics", fill='white', font=font_small)
    
    # Save to file
    img.save('/tmp/sample_infographic.png', 'PNG')
    print("Sample infographic saved to /tmp/sample_infographic.png")
    
    # Also return base64 for web display
    img_buffer = BytesIO()
    img.save(img_buffer, format='PNG')
    img_bytes = img_buffer.getvalue()
    img_base64 = base64.b64encode(img_bytes).decode('utf-8')
    
    return img_base64

if __name__ == "__main__":
    create_sample_infographic()